# mergesort on linked lists

.text
	
main:
	li a0, 7
	li a1, 100
	li a2, 1000
	jal make_random_list
	mv s0, a0
	
	mv a0, s0
	jal print_list
	
	mv a0, s0
    	jal mergesort

    	jal print_list

    li a7, 10
    ecall


# -----------------------------------------------------------------
# a0: head of list
# returns new head of list in a0
mergesort:
	beq a0, zero, mergesort_exit
        lw t0, 4(a0)
        beq t0, zero, mergesort_exit
	
	addi sp, sp, -8
	sw ra, 4(sp)
        sw s0, 0(sp)
	  
	jal unzip
	mv s0, a1        # rememeber right half	

	jal mergesort    # sort left half
	mv t0, a0        # temporarily store sorted left in t0
	mv a0, s0        # recall unsorted right half into a0
	mv s0, t0        # remember sorted left half
	jal mergesort    # sort right half
	
	mv a1, s0
	jal merge	
 
	lw s0, 0(sp)
	lw ra, 4(sp)
        addi sp, sp, 8

mergesort_exit:
	jr ra

   

# -----------------------------------------------------------------
# unzip linked list into two separate lists
# a0: head of list
# returns heads of two lists in a0, a1
unzip:
	# if list empty then set a1 to null and exit
	bne a0, zero, unzip_go
	mv a1, zero    
	beq a1, zero, unzip_exit
unzip_go:
	lw a1, 4(a0)
	mv t0, a0
unzip_loop:
	beq t0, zero, unzip_exit
	lw t1, 4(t0)    # t1: node.next
	beq t1, zero, unzip_exit
	lw t2, 4(t1)    # t2: t1.next  ( node.next.next)
	sw t2, 4(t0)    # node.next = t.next  ( = node.next.next )
	mv t0, t1       # node = t1  ( original node.next)
	j unzip_loop
unzip_exit:
	jr ra

   




# -----------------------------------------------------------------
# merge two sorted linked lists into one
# a0: head of first list
# a1: head of second list
# assumes both non-empty
# returns head of merged list in a0
merge:
        mv t0, a0    # t0: remainder of left list to merge
	mv t1, a1    # t1: remainder of right list to merger
	
	lw t2, 0(t0)
	lw t3, 0(t1)
	bgt t2, t3, merge_set_head_right
	lw t0, 4(t0)   # leave a0 as head, advance t0
	j merge_pre_loop

merge_set_head_right:
	mv a0, t1
	lw t1, 4(t1)   # t1 = t1.next
	
merge_pre_loop:
	mv t4, a0      # t4: current node (start at head)

merge_loop:
	beq t0, zero, merge_left_done
	beq t1, zero, merge_right_done
	lw t2, 0(t0)
	lw t3, 0(t1)
	bgt t2, t3, merge_set_right
	sw t0, 4(t4)
	mv t4, t0
	lw t0, 4(t0)
	j merge_loop
merge_set_right:
	sw t1, 4(t4)
	mv t4, t1
	lw t1, 4(t1)
	j merge_loop
merge_left_done:
	sw t1, 4(t4)
	j merge_exit
merge_right_done:
	sw t0, 4(t4)
merge_exit:
	jr ra
	

# -----------------------------------------------------------------
# prepend an integer onto linked list 
# a0: value
# a1: next
prepend:
	addi sp, sp, -12
	sw ra, 8(sp)
        sw s1, 4(sp)
        sw s0, 0(sp)  
        mv s0, a0
        mv s1, a1

        # allocate 8 bytes for the new node
        li a0, 8
        li a7, 9
        ecall
        sw s0, 0(a0)
        sw s1, 4(a0)
	
	lw s0, 0(sp)
        lw s1, 4(sp)
        lw ra, 8(sp)
        addi sp, sp, 12
	jr ra




# -----------------------------------------------------------------
# make_random_list
# a0 : size of list to make
# a1 : lower bound
# a2 : upper bound
# head of list returned in a0
make_random_list:
        addi sp, sp, -28
        sw ra, 24(sp)
        sw s5, 20(sp)
        sw s4, 16(sp)
        sw s3, 12(sp)
        sw s2, 8(sp)
        sw s1, 4(sp)
        sw s0, 0(sp)  

        mv s0, a0
        mv s1, a1
        mv s2, a2
	mv s3, zero       # s3: head of list (initially NULL)
	sub s4, s2, s1    # s4: size of random range
	mv s5, zero       # s5: loop counter
        
make_random_list_loop:
        bge s5, s0, make_random_list_exit

	# choose random number in range(s1, s2)
	mv a0, s4
        li a7, 41
        ecall   # random
	add a0, a0, s1

	# put new node with that random value at head of list
	mv a1, s3
	jal prepend
	mv s3, a0
	
	addi s5, s5, 1
        j make_random_list_loop
        
make_random_list_exit:
        mv a0, s3
        lw s0, 0(sp)
        lw s1, 4(sp)
        lw s2, 8(sp)
        lw s3, 12(sp)
        lw s4, 16(sp)
        lw s5, 20(sp)
        lw ra, 24(sp)
        addi sp, sp, 28
        jr ra



# -----------------------------------------------------------------
# print_list
# a0 : head of list
print_list:
        addi sp, sp, -8
        sw ra, 4(sp)
        sw s0, 0(sp)  
        mv s0, a0
print_list_loop:
        beq s0, zero, print_list_exit
	lw a0, 0(s0)
	li a7, 1
	ecall
	lw s0, 4(s0)
        j print_list_loop
print_list_exit:
        lw s0, 0(sp)
        lw ra, 4(sp)
        addi sp, sp, 8
        jr ra
