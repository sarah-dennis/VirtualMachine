#Quick sort of an array in RISC-V
.data
size: 
        .word 12
elements:   
        .word 10
        .word 6
        .word 12
        .word 3
        .word 7
        .word 9
        .word 4
        .word 14
        .word 27
        .word 21    
        .word 2
        .word 13
.text   
main:
        la a0, elements
        la t0, size
        lw a1, 0(t0)
        jal quick_sort
        j exit
    
quick_sort:
        addi sp, sp, -4
        sw ra, 0(sp)
        slli t0, a1, 2
        add a1, a0, t0
        jal qs_help         # call qs_help with start address and end addresses
        lw ra, 0(sp)
        addi sp, sp, 4
        jr ra
   
qs_help:
        addi t0, a0, 4
        blt t0, a1, qs_help_main
        jr ra
qs_help_main:
        addi sp, sp, -16
        sw ra, 12(sp)
        sw s0, 8(sp)
        sw s1, 4(sp)
        sw s2, 0(sp)
        
        mv s0, a0
        mv s1, a1
        jal partition
        mv s2, a0           # s2 is address of partition point (p)
        mv a0, s0
        mv a1, s2
        jal qs_help         # quicksort left on start, p
        add a0, s2, 4
        mv a1, s1
        jal qs_help         # quicksort right on p+1, stop

        lw s2, 0(sp)
        lw s1, 4(sp)
        lw s0, 8(sp)
        lw ra, 12(sp)
        addi sp, sp, 16
        jr ra

partition:
        mv t0, a0          # t0 is pivot address (p)
        lw t1, 0(t0)       # t1 is pivot value (pv)
        addi t2, a1, -4    # t2 is right-most address (r)
partition_loop:
        bge t0, t2, partition_loop_exit
        lw t3, 4(t0)       # t3 is value stored just to right of pivot (a[p+1])
        ble t3, t1, partition_move_pivot

        lw t4, 0(t2)       # t4 is next value to consider from right side (a[r])
        sw t3, 0(t2)       # a[r] = lv
        sw t4, 4(t0)       # a[p + 1] = rv
        addi t2, t2, -4    # r--
        j partition_loop
        
partition_move_pivot:
        sw t1, 4(t0)       # a[p + 1] = pv
        sw t3, 0(t0)       # a[p] = lv
        addi t0, t0, 4     # p++
        j partition_loop

partition_loop_exit:    
        mv a0, t0
        jr ra
    
exit:
